EscapeRoom(
    título="Sala buéde fixe",
    tamanho=[1300,700],
    cenários=[cena,cena2],
    eventos=[abrir_porta,abrir_porta2,muda_cena,muda_cena2,fim,chave_inventario,tentar_abrir_cofre,abrir_cofre,mostrar_erro,mensagem_trancada,arrasta_lupa,aumentar_nota,move_lupa,desaparecer_nota_lupa],
    transições=[]
)

importa Objeto.porta
importa Objeto.cofre



.room        = Python.Function.dotpng("room")
.room2       = room
.tamanho     = Python.Local.tamanho
.posicao     = Python.Local.posicao
.num         = Python.Local.num
.codigo      = Python.Local.codigo
.lista       = Python.Local.door
.lista2      = Python.Local.puzzle

.porta       = Objeto.porta(posição=(600,342),tamanho=tamanho)
.porta2      = Objeto.porta(posição=(0,342),tamanho=tamanho)
.cofre       = Objeto.cofre(posição=posicao, tamanho=[172,num])

.normal      = Estado.Estático(
                imagem="../assets/images/key.png"
                )

.ativa       = Estado.Estático(
                imagem="../assets/images/active_key.png"
                )
.chave       = Objeto(
                estados=[normal],
                posição=(1020,520),
                tamanho=[50,25]
                )

.chave.adiciona_Estado(ativa)

.nota_normal = Estado.Estático(
                imagem=Python.Function.dotpng("nota"),
                posição=(400,600),
                tamanho=[30,30]
                )

.nota       = Objeto(
                estado_inicial=nota_normal,
                estados=[nota_normal]
                )

.abrir_porta_som = Som(
                fonte=Python.Function.dotmp3("door-1-open")
                )

.porta.adiciona_Som(abrir_porta_som)
.porta2.adiciona_Som(abrir_porta_som)


.visivel    = Estado.Estático(
                imagem=Python.Function.dotpng("nota_nova")
)

.lupa_normal = Estado.Estático(imagem=Python.Function.dotpng("lupa"))

.lupa_ativa = Estado.Estático(imagem=Python.Function.dotpng("active_lupa"))

.lupa = Objeto(
            estado_inicial=lupa_normal,
            estados=[lupa_normal,lupa_ativa],
            posição=(200,500),
            tamanho=[40,40]
)

.aberta = Estado.Estático(
            imagem=Python.Function.dotpng("open_door")
            )
            
.porta3 = Objeto(estado_inicial=aberta,estados=[aberta],posição=(600,342),tamanho=[225,300])

.background = Estado.Estático(imagem=room)

.cena        = Cenário(
                estado_inicial=background,
                estados=[background],
                objetos=[porta,porta2,cofre,chave,nota, Objeto.nota_lupa(estados=[], posição=(300,500), tamanho=[200,200]),lupa]
                )

.cena2        = Cenário(
                estado_inicial=background,
                estados=[background],
                objetos=[porta3]
                )

.nota_lupa.adiciona_Estado(visivel)

.abrir_cofre = Evento(
    então=cofre muda para cofre_aberto e chave muda para normal
)

.mostrar_erro = Evento(
    então=mostra mensagem "Código errado!" em (1000, 485)
)



.codigo_cofre = Desafio.Pergunta(
                pergunta="Qual é o código do cofre?",
                resposta=codigo,
                sucesso=abrir_cofre,
                falha=mostrar_erro
                )

.aumentar_nota = Evento(
    então=nota_lupa muda para visivel
)


.move_lupa = Evento(
    então=lupa muda posição para (200,500)
)

.arrasta_lupa_des = Desafio.Arrasta(
                objeto_id=lupa,
                objeto_gatilho=nota,
                sucesso=aumentar_nota,
                falha=move_lupa
                )

                
.escolha_multipla = Desafio.Escolha_Múltipla(
    pergunta="Qual destes códigos, corresponde corretamente a esta expressão regular:\n[0-9]{3}-\[0-9]-\[0-9]{3}",
    escolhas=["147-852-963","45-987-855","458-98-874","210-233-90"],
    resposta="147-852-963",
    sucesso=abrir_cofre,
    falha=mostrar_erro
    )
.conexao = Desafio.Conexão(
    pergunta="Conecta corretamente",
    lista1=["book","pencil","cat","dog"],
    lista2=["livro","lápis","gato","cão"],
    sucesso=abrir_cofre,
    falha=mostrar_erro
)
.sequencia = Desafio.Sequência(
    pergunta="Escolha por ordem crescente",
    sequência=["320","600","1000","2500"],
    sucesso=abrir_cofre,
    falha=mostrar_erro
)
.puzzle = Desafio.Puzzle(
    imagem=Python.Function.dotpng("puzzle"),
    sucesso=abrir_cofre
)
.slidepuzzle = Desafio.SlidePuzzle(
    imagem=Python.Function.dotpng("puzzle"),
    sucesso=abrir_cofre
)
.socket = Desafio.Socket(
    host="127.0.0.1",
    port=65433,
    mensagem="à escuta...",
    sucesso=abrir_cofre,
    falha=mostrar_erro
)

.abrir_porta = Evento(
    se=clique porta e porta está porta_fechada e chave está em uso,
    então=porta muda para porta_aberta e chave é removida e toca porta_abrir da porta,
    repetições=1
)

.abrir_porta2 = Evento(
    se=clique porta2 e porta2 está porta_fechada e já passaram 5 segundos,
    então=porta2 muda para porta_aberta e toca porta_abrir da porta2,
    repetições=1
)


.muda_cena = Evento(
    se=clique porta2 e porta2 está porta_aberta,
    então=muda para cenário cena2
)

.muda_cena2 = Evento(
    se=clique porta3 e porta3 está aberta,
    então=muda para cenário cena
)

.fim = Evento(
    se=clique porta e porta está porta_aberta,
    então=fim de jogo,
    repetições=1
)

.chave_inventario = Evento(
    se=clique chave e cofre está cofre_aberto,
    então=chave vai para o inventário,
    repetições=1
)

.tentar_abrir_cofre = Evento(
    se=clique cofre e cofre está cofre_fechado,
    então=começa desafio slidepuzzle,
    repetições=1
)

.mensagem_trancada = Evento(
    se=clique porta e porta está porta_fechada e não chave está em uso,
    então=mostra mensagem "porta trancada! procura uma chave!" em (600,385) e toca porta_locked do porta
)

.arrasta_lupa = Evento(
    se=clique lupa,
    então=começa desafio arrasta_lupa_des
)


.desaparecer_nota_lupa = Evento(
    se=clique não nota_lupa e nota_lupa está visivel,
    então=nota_lupa muda para none
)

Python =
import glob
import os
from imageplustxt import add_text_to_image

from erpl.engine.model.object import Object
from erpl.engine.model.utils import *

o = Object("ola","sceje",Position(10,10),Size(10,10))


def dotpng(string):
    current_folder = os.getcwd()
    return current_folder+"/../assets/images/"+string+".png"

def dotttf(string):
    current_folder = os.getcwd()
    return current_folder+"/../assets/fonts/"+string+".ttf"

def dotmp3(string):
    current_folder = os.getcwd()
    return current_folder+"/../assets/sounds/"+string+".mp3"


posicao = (1000,485)
room = dotpng("room")
num = 100
tamanho = [225,300]
codigo = "932"
current_folder = os.getcwd()
door = glob.glob(f"{current_folder}/../assets/images/door/*.png")
puzzle = glob.glob(f"{current_folder}/../assets/images/puzzle/*.png")
add_text_to_image(dotpng("nota"),dotpng("nota_nova"),"932",(255,255,255),dotttf("arial"))
